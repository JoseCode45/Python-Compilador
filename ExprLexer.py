# Generated from ExprLexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,36,224,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,1,0,1,0,1,0,1,0,1,0,3,0,79,8,0,
        1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,6,
        1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,12,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,
        1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,
        1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,
        1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
        3,24,163,8,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,3,28,173,8,
        28,1,28,1,28,1,28,3,28,178,8,28,1,28,1,28,1,29,4,29,183,8,29,11,
        29,12,29,184,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,196,
        8,30,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,33,1,33,
        1,33,1,34,1,34,5,34,213,8,34,10,34,12,34,216,9,34,1,35,4,35,219,
        8,35,11,35,12,35,220,1,35,1,35,0,0,36,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,30,61,31,63,32,65,33,67,34,69,35,71,36,1,0,5,2,0,74,74,106,106,
        1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,
        0,9,9,12,13,32,32,232,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,
        0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,
        0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,
        0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,
        0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,
        0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,
        0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,
        0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,1,78,1,0,0,0,3,80,1,0,0,0,5,84,1,
        0,0,0,7,86,1,0,0,0,9,88,1,0,0,0,11,91,1,0,0,0,13,93,1,0,0,0,15,96,
        1,0,0,0,17,98,1,0,0,0,19,100,1,0,0,0,21,102,1,0,0,0,23,104,1,0,0,
        0,25,106,1,0,0,0,27,110,1,0,0,0,29,117,1,0,0,0,31,119,1,0,0,0,33,
        121,1,0,0,0,35,123,1,0,0,0,37,125,1,0,0,0,39,130,1,0,0,0,41,133,
        1,0,0,0,43,138,1,0,0,0,45,143,1,0,0,0,47,147,1,0,0,0,49,162,1,0,
        0,0,51,164,1,0,0,0,53,166,1,0,0,0,55,168,1,0,0,0,57,172,1,0,0,0,
        59,182,1,0,0,0,61,195,1,0,0,0,63,197,1,0,0,0,65,203,1,0,0,0,67,207,
        1,0,0,0,69,210,1,0,0,0,71,218,1,0,0,0,73,74,5,97,0,0,74,75,5,110,
        0,0,75,79,5,100,0,0,76,77,5,111,0,0,77,79,5,114,0,0,78,73,1,0,0,
        0,78,76,1,0,0,0,79,2,1,0,0,0,80,81,5,110,0,0,81,82,5,111,0,0,82,
        83,5,116,0,0,83,4,1,0,0,0,84,85,5,10,0,0,85,6,1,0,0,0,86,87,5,61,
        0,0,87,8,1,0,0,0,88,89,5,61,0,0,89,90,5,61,0,0,90,10,1,0,0,0,91,
        92,5,42,0,0,92,12,1,0,0,0,93,94,5,42,0,0,94,95,5,42,0,0,95,14,1,
        0,0,0,96,97,5,59,0,0,97,16,1,0,0,0,98,99,5,43,0,0,99,18,1,0,0,0,
        100,101,5,46,0,0,101,20,1,0,0,0,102,103,5,74,0,0,103,22,1,0,0,0,
        104,105,5,45,0,0,105,24,1,0,0,0,106,107,5,100,0,0,107,108,5,101,
        0,0,108,109,5,102,0,0,109,26,1,0,0,0,110,111,5,114,0,0,111,112,5,
        101,0,0,112,113,5,116,0,0,113,114,5,117,0,0,114,115,5,114,0,0,115,
        116,5,110,0,0,116,28,1,0,0,0,117,118,5,40,0,0,118,30,1,0,0,0,119,
        120,5,41,0,0,120,32,1,0,0,0,121,122,5,58,0,0,122,34,1,0,0,0,123,
        124,5,44,0,0,124,36,1,0,0,0,125,126,5,78,0,0,126,127,5,111,0,0,127,
        128,5,110,0,0,128,129,5,101,0,0,129,38,1,0,0,0,130,131,5,105,0,0,
        131,132,5,102,0,0,132,40,1,0,0,0,133,134,5,101,0,0,134,135,5,108,
        0,0,135,136,5,115,0,0,136,137,5,101,0,0,137,42,1,0,0,0,138,139,5,
        112,0,0,139,140,5,97,0,0,140,141,5,115,0,0,141,142,5,115,0,0,142,
        44,1,0,0,0,143,144,3,41,20,0,144,145,5,43,0,0,145,146,3,39,19,0,
        146,46,1,0,0,0,147,148,5,119,0,0,148,149,5,104,0,0,149,150,5,105,
        0,0,150,151,5,108,0,0,151,152,5,101,0,0,152,48,1,0,0,0,153,154,5,
        84,0,0,154,155,5,114,0,0,155,156,5,117,0,0,156,163,5,101,0,0,157,
        158,5,70,0,0,158,159,5,97,0,0,159,160,5,108,0,0,160,161,5,115,0,
        0,161,163,5,101,0,0,162,153,1,0,0,0,162,157,1,0,0,0,163,50,1,0,0,
        0,164,165,5,62,0,0,165,52,1,0,0,0,166,167,5,60,0,0,167,54,1,0,0,
        0,168,169,5,47,0,0,169,56,1,0,0,0,170,173,3,59,29,0,171,173,3,61,
        30,0,172,170,1,0,0,0,172,171,1,0,0,0,173,174,1,0,0,0,174,177,5,43,
        0,0,175,178,3,59,29,0,176,178,3,61,30,0,177,175,1,0,0,0,177,176,
        1,0,0,0,178,179,1,0,0,0,179,180,7,0,0,0,180,58,1,0,0,0,181,183,7,
        1,0,0,182,181,1,0,0,0,183,184,1,0,0,0,184,182,1,0,0,0,184,185,1,
        0,0,0,185,60,1,0,0,0,186,187,3,59,29,0,187,188,5,46,0,0,188,189,
        3,59,29,0,189,196,1,0,0,0,190,191,3,59,29,0,191,192,5,46,0,0,192,
        196,1,0,0,0,193,194,5,46,0,0,194,196,3,59,29,0,195,186,1,0,0,0,195,
        190,1,0,0,0,195,193,1,0,0,0,196,62,1,0,0,0,197,198,5,114,0,0,198,
        199,5,97,0,0,199,200,5,110,0,0,200,201,5,103,0,0,201,202,5,101,0,
        0,202,64,1,0,0,0,203,204,5,102,0,0,204,205,5,111,0,0,205,206,5,114,
        0,0,206,66,1,0,0,0,207,208,5,105,0,0,208,209,5,110,0,0,209,68,1,
        0,0,0,210,214,7,2,0,0,211,213,7,3,0,0,212,211,1,0,0,0,213,216,1,
        0,0,0,214,212,1,0,0,0,214,215,1,0,0,0,215,70,1,0,0,0,216,214,1,0,
        0,0,217,219,7,4,0,0,218,217,1,0,0,0,219,220,1,0,0,0,220,218,1,0,
        0,0,220,221,1,0,0,0,221,222,1,0,0,0,222,223,6,35,0,0,223,72,1,0,
        0,0,9,0,78,162,172,177,184,195,214,220,1,6,0,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    OP_BOOL = 1
    NOT = 2
    BL = 3
    EQ = 4
    EQ2 = 5
    MUL = 6
    POT = 7
    SEMI = 8
    PLUS = 9
    DOT = 10
    J = 11
    MINUS = 12
    DEF = 13
    RETURN = 14
    B_PARATENSIS = 15
    C_PARATENSIS = 16
    COLON = 17
    COMMA = 18
    NONE = 19
    IF = 20
    ELSE = 21
    PASS = 22
    ELIF = 23
    WHILE = 24
    BOOL = 25
    GREATER = 26
    LESSER = 27
    DIVIDE = 28
    COMPLEX = 29
    INT = 30
    FLOAT = 31
    RANGE = 32
    FOR = 33
    IN = 34
    ID = 35
    WS = 36

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'not'", "'\\n'", "'='", "'=='", "'*'", "'**'", "';'", "'+'", 
            "'.'", "'J'", "'-'", "'def'", "'return'", "'('", "')'", "':'", 
            "','", "'None'", "'if'", "'else'", "'pass'", "'while'", "'>'", 
            "'<'", "'/'", "'range'", "'for'", "'in'" ]

    symbolicNames = [ "<INVALID>",
            "OP_BOOL", "NOT", "BL", "EQ", "EQ2", "MUL", "POT", "SEMI", "PLUS", 
            "DOT", "J", "MINUS", "DEF", "RETURN", "B_PARATENSIS", "C_PARATENSIS", 
            "COLON", "COMMA", "NONE", "IF", "ELSE", "PASS", "ELIF", "WHILE", 
            "BOOL", "GREATER", "LESSER", "DIVIDE", "COMPLEX", "INT", "FLOAT", 
            "RANGE", "FOR", "IN", "ID", "WS" ]

    ruleNames = [ "OP_BOOL", "NOT", "BL", "EQ", "EQ2", "MUL", "POT", "SEMI", 
                  "PLUS", "DOT", "J", "MINUS", "DEF", "RETURN", "B_PARATENSIS", 
                  "C_PARATENSIS", "COLON", "COMMA", "NONE", "IF", "ELSE", 
                  "PASS", "ELIF", "WHILE", "BOOL", "GREATER", "LESSER", 
                  "DIVIDE", "COMPLEX", "INT", "FLOAT", "RANGE", "FOR", "IN", 
                  "ID", "WS" ]

    grammarFileName = "ExprLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


