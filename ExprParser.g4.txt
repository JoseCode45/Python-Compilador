parser grammar ExprParser;
options { tokenVocab=ExprLexer; }

program
    : stat+ EOF
    | def EOF
    ;

stat: ID EQ expr SEMI
    | ID PLUS  ID SEMI
    | if expr then stat else stat
    | (expr | query | cond) SEMI "\n"
    ;

query: BOOL  
    | query OP_BOOL query
    | NOT query
    | '(' query ')'
    | expr (LESSER | GREATER | EQUAL ) expr
    ;
    
cond: IF
    |ELSE
    |ELIF
    | IF expr ':' stat ELSE ':' stat
    | IF expr ':' stat ELIF expr ':' stat 
    | IF expr ':' stat ELIF expr ':' stat ELSE ':' stat
    | IF expr ':' stat (ELIF expr ':' stat)+ 
    | IF expr ':' stat (ELIF expr ':' stat)+ ELSE ':' stat



expr: ID
    | INT
    | FLOAT
    | COMPLEX
    | expr (MUL | DIVIDE) expr
    | expr (PLUS | MINUS) expr
    | expr (GREATER | LESSER) expr
    | 'not' expr
    | expr and expr
    | expr 'or' expr
    | expr query expr
    | '(' expr ')' 
    |func
    
        
func : ID '(' expr (','expr)* ')' ;        
        
